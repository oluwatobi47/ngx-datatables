import { AfterContentInit, AfterViewChecked, AfterViewInit, ComponentFactoryResolver, ElementRef, NgZone, OnChanges, OnDestroy, OnInit, QueryList, SimpleChanges } from "@angular/core";
import { Observable } from "rxjs/Observable";
import { DatatablesColumnComponent } from "../datatables-column/datatables-column.component";
export declare class DatatablesComponent implements OnInit, OnDestroy, AfterViewInit, AfterContentInit, AfterViewChecked, OnChanges {
    private elementRef;
    private zone;
    private componentFactoryResolver;
    private readonly ROW_SELECTOR_CLASS;
    columns: QueryList<DatatablesColumnComponent>;
    selectionMode: string;
    tableClass: string;
    containerClass: string;
    data: Object[];
    ajaxOptions: string | DataTables.AjaxSettings | DataTables.FunctionAjax;
    options: DataTables.Settings;
    hideSearchInput: boolean;
    private options$;
    private dataListener;
    dirtyData: boolean;
    private tableElementRef;
    private _dataTableApi;
    private initListener;
    private datatablesTemplateComponent;
    private templateViewContainerRef;
    constructor(elementRef: ElementRef, zone: NgZone, componentFactoryResolver: ComponentFactoryResolver);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngAfterViewChecked(): void;
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private init();
    private initDataTable();
    private renderDirtyData();
    private initSelection(tableApi);
    private initColumnHeader(thead);
    private initColumnDefs();
    private buildRowSelectorColumn(columnDef);
    private buildTemplateComponent();
    private onPreDrawCallbackEvent(settings);
    private onDrawCallbackEvent(settings);
    private onHeaderCallbackEvent(thead, data, start, end, display);
    private currentData();
    private NO_SEARCH_INPUT_DOM;
    private DEFAULT_SETTINGS;
    private PRIVATE_SETTINGS;
    toolbar: Observable<Element>;
    readonly dataTableApi: DataTables.Api;
    getSelectedRowsCount(): number;
    getSelectedRows(): Element[];
    isRowSelected(row: Node | JQuery): boolean;
    selectRow(row: Node | JQuery): void;
    deselectRow(row: Node | JQuery): void;
    selectAllRows(): void;
    deselectAllRows(): void;
    isServerSide(): boolean;
    reload(): void;
}
